
--- A Mikropascal Compiler ---

Authors: AJ Shinde, Rishad Bharucha, Jon Fast
Class: CSCI 481
Language: C++11

Desription: A compiler for the Mikropascal
language using C++.

Notes:
------
- No Makefiles will be synced with the Git server. Use Eclipse to generate these automatically when
  creating an existing project from a Makefile
- Be aware that MinGW has a problem with the std::to_string() function and may not compile this
  statement on the latest version. This problem is Windows specific (please use Mac or Linux if possible).
- Remember to add '-std=c++11' without quotes to 'Other Flags' or else this will not compile.
- Use GCC 4.8.1 or above to compile, or Clang 3.4 or above.

Descriptions:
-------------
Standard.hpp - A header file containing most standard includes needed for compilation.
FiniteAutomata.hpp - A header only library containing FSA constructs.
Input.hpp/Input.cpp - A general purpose class for getting input into the program.
Scanner.hpp/Scanner.cpp - A class for scanning Mikropascal tokens from an Input class stream.
Parser.hpp/Parser.cpp - A class for parsing a Mikropascal grammar given Mikropascal tokens from a Scanner class.
Tokens.hpp - A list of Mikropascal tokens and accessors.
Rules.hpp - A list of tokens and grammar rules and their accessors.
Symbols.hpp/Symbols.cpp - A symbol table implementation for Mikropascal.
Structures.hpp - Miscellaneous data structures (if necessary, can be removed).
Helper.hpp - A list of helper functions for displaying output, errors, etc.
Tests.hpp - Tests of each class.
Driver.hpp - The file that includes the main() function used to initialize the compiler.

Sample Output:
--------------
(None currently...)